const n={convertToAgent:r=>r},o={async createAgent(r){try{console.log("[SUPABASE_REMOVAL] Attempting to create agent with raw data:",r);const e={id:`mock_agent_${Date.now()}`,user_id:r.user_id,name:r.name,description:r.description,category:r.category,input_format:r.input_format,output_format:r.output_format,pricing_model:r.pricing_model,hourly_rate:r.hourly_rate,api_endpoint:r.api_endpoint,status:r.status||"pending",avg_rating:0,total_reviews:0,created_at:new Date().toISOString(),updated_at:new Date().toISOString()};return console.warn("[SUPABASE_REMOVAL] Returning mock agent for createAgent, Supabase removed."),n.convertToAgent(e)}catch(e){return console.error("Error creating agent:",e),null}},async getAgentById(r){try{return console.warn("[SUPABASE_REMOVAL] Returning null for getAgentById, Supabase removed."),null}catch(e){return console.error("Error fetching agent:",e),null}},async getAgents(r){try{return console.warn("[SUPABASE_REMOVAL] Returning empty array for getAgents, Supabase removed."),[]}catch(e){return console.error("Error fetching agents:",e),[]}},async getUserAgents(r){try{return console.warn("[SUPABASE_REMOVAL] Returning empty array for getUserAgents, Supabase removed."),[]}catch(e){return console.error("Error fetching user agents:",e),[]}},async updateAgent(r,e){try{return console.warn("[SUPABASE_REMOVAL] Returning false for updateAgent, Supabase removed."),!1}catch(t){return console.error("Error updating agent:",t),!1}}};export{o as a};
