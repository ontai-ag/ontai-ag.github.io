import{j as e}from"./index-BidpMcxo.js";import{H as n,F as a}from"./Footer-DnCoV763.js";const s=({children:t})=>e.jsxs("div",{className:"flex flex-col min-h-screen",children:[e.jsx(n,{}),e.jsx("main",{className:"flex-grow container mx-auto px-4 py-8",children:t}),e.jsx(a,{})]}),i=[{id:"1",title:"Первый пост в блоге о AI",slug:"first-ai-post",date:"2025-05-02",author:"Ontai AI Team",excerpt:"Это краткое описание первого поста в нашем новом блоге, посвященном искусственному интеллекту и его возможностям.",content:`
## Введение в мир AI

Искусственный интеллект (AI) стремительно меняет наш мир. От голосовых помощников до сложных систем анализа данных, AI становится неотъемлемой частью нашей повседневной жизни и бизнеса.

### Ключевые направления развития AI:

*   Машинное обучение (Machine Learning)
*   Глубокое обучение (Deep Learning)
*   Обработка естественного языка (Natural Language Processing)
*   Компьютерное зрение (Computer Vision)

> AI – это не просто технология, это новая эра возможностей.

В этом блоге мы будем исследовать последние достижения, делиться инсайтами и обсуждать будущее AI.

\`\`\`typescript
// Пример кода
function greet(name: string) {
  console.log(\`Hello, \${name}!\`);
}
greet('World');
\`\`\`

Следите за обновлениями!
    `,imageUrl:"https://images.unsplash.com/photo-1526374965328-7f61d4dc18c5?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8YWl8ZW58MHx8MHx8fDA%3D&auto=format&fit=crop&w=500&q=60",tags:["AI","Machine Learning","Introduction"]},{id:"2",title:"Как Shadcn/UI упрощает разработку интерфейсов",slug:"shadcn-ui-benefits",date:"2025-05-10",author:"Frontend Developer @ Ontai",excerpt:"Обзор преимуществ использования библиотеки компонентов Shadcn/UI в связке с Tailwind CSS для создания современных и адаптивных веб-интерфейсов.",content:`
## Shadcn/UI: Новый подход к UI-компонентам

Shadcn/UI предлагает уникальный подход к созданию UI-компонентов. Вместо традиционной библиотеки, это коллекция повторно используемых компонентов, которые вы можете скопировать и вставить в свои приложения и настроить по своему усмотрению.

### Преимущества:

*   **Полный контроль:** Вы владеете кодом компонентов.
*   **Легкая кастомизация:** Стилизация через Tailwind CSS.
*   **Доступность:** Компоненты разработаны с учетом WCAG.
*   **Минимализм:** Нет лишних зависимостей.

\`\`\`bash
# Добавление компонента
npx shadcn-ui@latest add button
\`\`\`

Использование Shadcn/UI значительно ускоряет процесс разработки и позволяет сосредоточиться на уникальных аспектах вашего продукта, а не на создании базовых UI-элементов с нуля.

### Пример использования Card из Shadcn/UI

Карточки, подобные тем, что будут использоваться в этом блоге, легко создаются с помощью компонента \`Card\` из Shadcn/UI. Это обеспечивает консистентный и профессиональный вид.

Оставайтесь с нами, чтобы узнать больше о современных инструментах веб-разработки!
    `,imageUrl:"https://images.unsplash.com/photo-1551288049-bebda4e38f71?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8M3x8ZGFzaGJvYXJkfGVufDB8fDB8fHww&auto=format&fit=crop&w=500&q=60",tags:["Shadcn/UI","Tailwind CSS","Frontend","React"]},{id:"3",title:"Будущее React: Server Components и их влияние",slug:"react-server-components",date:"2025-05-13",excerpt:"Разбираемся, что такое React Server Components (RSC), как они работают и какое влияние окажут на разработку веб-приложений.",content:`
## React Server Components: Революция или эволюция?

React Server Components (RSC) – это новая архитектура, представленная командой React, которая позволяет компонентам выполняться на сервере. Это открывает новые возможности для оптимизации производительности и улучшения пользовательского опыта.

### Основные концепции RSC:

1.  **Нулевой размер бандла:** Серверные компоненты не попадают в клиентский JavaScript бандл.
2.  **Прямой доступ к бэкенду:** Могут напрямую обращаться к источникам данных (базы данных, файловая система) без создания API-эндпоинтов.
3.  **Автоматическое разделение кода:** Клиентские компоненты загружаются только при необходимости.

Хотя RSC все еще находятся в активной разработке и интеграции с фреймворками (например, Next.js), их потенциал огромен. Они могут кардинально изменить подход к созданию полнофункциональных веб-приложений на React.

\`\`\`javascript
// Пример Server Component (упрощенно)
async function NotesList() {
  const notes = await db.notes.findMany();
  return (
    <ul>
      {notes.map(note => <li key={note.id}>{note.title}</li>)}
    </ul>
  );
}
\`\`\`

Это значительный шаг вперед для экосистемы React, и мы будем внимательно следить за развитием этой технологии.
    `,tags:["React","Server Components","Web Development","Performance"]}];export{s as B,i as m};
