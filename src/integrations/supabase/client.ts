
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Validate environment variables
if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  throw new Error("Supabase URL or Anon Key is missing from environment variables.");
}

// Create the client with our extended type
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Custom types for agent-related data
export type AgentCategory = 
  | 'text-generation'
  | 'image-generation'
  | 'data-analysis'
  | 'conversational-ai'
  | 'code-generation'
  | 'translation'
  | 'other';

export type AgentPricingModel = 
  | 'free'
  | 'pay-per-use'
  | 'subscription'
  | 'custom';

export type AgentStatus = 
  | 'pending'
  | 'approved'
  | 'rejected';

export interface Agent {
  id: string;
  user_id: string;
  name: string;
  description: string;
  category: AgentCategory;
  input_format: string;
  output_format: string;
  pricing_model: AgentPricingModel;
  hourly_rate: number | null;
  api_endpoint: string | null;
  status: AgentStatus;
  avg_rating: number;
  total_reviews: number;
  created_at: string;
  updated_at: string;
}

// Extended Agent interface with marketplace display properties
export interface AgentWithUIDetails extends Agent {
  image?: string;
  price?: number;
}

// User profile data type
export interface ProfileData {
  id: string;
  full_name: string | null;
  avatar_url: string | null;
  role: 'user' | 'developer' | 'admin';
  created_at: string;
  updated_at: string;
}

// Task status type
export type TaskStatus = 
  | 'pending'
  | 'processing'
  | 'completed'
  | 'failed';

// Notification preference type
export type NotificationChannel = 
  | 'email'
  | 'sms'
  | 'slack'
  | 'none';

// Output format type
export type OutputFormat = 
  | 'text'
  | 'pdf'
  | 'json'
  | 'csv'
  | 'image';

// Task data type
export interface Task {
  id: string;
  user_id: string;
  agent_id: string;
  prompt: string;
  additional_info: string | null;
  attachment_url: string | null;
  status: TaskStatus;
  result: string | null;
  price: number;
  payment_status: 'pending' | 'completed' | 'failed';
  notification_channel: NotificationChannel;
  output_format: OutputFormat;
  revision_count: number;
  max_revisions: number;
  feedback: string | null;
  created_at: string;
  updated_at: string;
}

// Revision data type for tracking task revision history
export interface TaskRevision {
  id: string;
  task_id: string;
  result: string;
  feedback: string | null;
  created_at: string;
}

// Review data type for task reviews
export interface TaskReview {
  id: string;
  task_id: string;
  user_id: string;
  agent_id: string;
  rating: number; 
  review_text: string | null;
  created_at: string;
  updated_at: string;
}

// Payment log record interface
export interface PaymentLog {
  id?: string;
  payment_id: string;
  amount: number;
  status: 'pending' | 'completed' | 'failed';
  task_id?: string;
  user_id?: string;
  transaction_time: string;
  verified_at?: string;
}

// Type adapters to convert database responses to the expected types
export const typeAdapters = {
  // Convert raw database agent to Agent type
  convertToAgent: (rawAgent: any): Agent => {
    return {
      ...rawAgent,
      category: rawAgent.category as AgentCategory,
      pricing_model: rawAgent.pricing_model as AgentPricingModel,
      status: rawAgent.status as AgentStatus,
      avg_rating: Number(rawAgent.avg_rating || 0),
      total_reviews: Number(rawAgent.total_reviews || 0)
    };
  },
  
  // Convert raw database task to Task type
  convertToTask: (rawTask: any): Task => {
    return {
      ...rawTask,
      status: rawTask.status as TaskStatus,
      notification_channel: rawTask.notification_channel as NotificationChannel,
      output_format: rawTask.output_format as OutputFormat,
      price: Number(rawTask.price || 0),
      revision_count: Number(rawTask.revision_count || 0),
      max_revisions: Number(rawTask.max_revisions || 3)
    };
  },
  
  // Convert raw profile to ProfileData type
  convertToProfile: (rawProfile: any): ProfileData => {
    return {
      ...rawProfile,
      role: rawProfile.role as 'user' | 'developer' | 'admin'
    };
  },
  
  // Convert raw payment log to PaymentLog type
  convertToPaymentLog: (rawPaymentLog: any): PaymentLog => {
    return {
      ...rawPaymentLog,
      amount: Number(rawPaymentLog.amount || 0),
      status: rawPaymentLog.status as 'pending' | 'completed' | 'failed'
    };
  }
};

// Payment details interface for the payment service
export interface PaymentDetails {
  paymentId: string;
  amount: number;
  status: 'pending' | 'completed' | 'failed';
  taskId?: string;
  userId?: string;
  transaction_time?: string;
}
